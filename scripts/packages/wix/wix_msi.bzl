# Copyright 2018 The Bazel Authors. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Starlark rule definition to create a Windows Installer Package (.msi) file
# using the WiX Toolset.
#
# To use this rule, the WORKSPACE file must define the @wix_toolset repository.
# Example:
#
#     load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")
#     http_archive(
#         name = "wix_toolset",
#         url = "https://github.com/wixtoolset/wix3/releases/download/wix3111rtm/wix311-binaries.zip",
#         sha256 = "37f0a533b0978a454efb5dc3bd3598becf9660aaf4287e55bf68ca6b527d051d",
#         build_file_content = "exports_files(['candle.exe', 'light.exe'])",
#     )

load(":wix/guids.bzl", "get_guid")

def _impl(ctx):
  processed_wxs = ctx.actions.declare_file(ctx.label.name + "-proc.wxs")
  icon = ""
  if ctx.file.icon:
    icon = """<Icon Id='BazelIcon' SourceFile='%s' />
              <Property Id='ARPPRODUCTICON' Value='BazelIcon' />""" % ctx.file.icon.path
  ctx.actions.expand_template(
      template = ctx.file.template,
      output = processed_wxs,
      substitutions = {
          "%{release-guid}": get_guid(ctx.attr.release_version),
          "%{release-version}": ctx.attr.release_version,
          "%{release-binary}": ctx.file.release_binary.path,
          "%{icon}": icon,
      })

  wixobj = ctx.actions.declare_file(ctx.label.name + ".wixobj")
  args = ctx.actions.args()
  args.add("-nologo")
  args.add("-arch", "x64")
  args.add("-o", wixobj)
  args.add(processed_wxs)
  ctx.actions.run(
      inputs = [processed_wxs],
      outputs = [wixobj],
      executable = ctx.file._tool_candle,
      arguments = [args],
      mnemonic = "WiXToolsetCandle",
      progress_message = "Compiling .wxs to .wixobj using Candle",
      use_default_shell_env = True,
  )

  inputs = [processed_wxs, wixobj, ctx.file.release_binary]
  args = ctx.actions.args()
  args.add("-nologo")
  args.add("-ext", "WixUIExtension")
  args.add("-cultures:en-us")
  if ctx.file.license:
    inputs.append(ctx.file.license)
    args.add("-dWixUILicenseRtf=" + ctx.file.license.path)
  if ctx.file.artwork_big:
    inputs.append(ctx.file.artwork_big)
    args.add("-dWixUIDialogBmp=" + ctx.file.artwork_big.path)
  if ctx.file.artwork_small:
    inputs.append(ctx.file.artwork_small)
    args.add("-dWixUIBannerBmp=" + ctx.file.artwork_small.path)


  args.add("-o", ctx.outputs.msi)
  args.add(wixobj)
  ctx.actions.run(
      inputs = inputs,
      outputs = [ctx.outputs.msi],
      executable = ctx.file._tool_light,
      arguments = [args],
      mnemonic = "WiXToolsetLight",
      progress_message = "Linking .wixobj to .msi using Light",
      use_default_shell_env = True,
  )

wix_msi = rule(
    implementation = _impl,
    attrs = {
        # Label of the Wix XML (.wxs) file. This must be a template with the
        # following placeholders:
        #   %{release-guid}
        #   %{release-version}
        #   %{release-binary}
        #   %{icon}
        "template": attr.label(allow_single_file = True, mandatory = True),

        # Name of the output file, generated by this rule. Should have an .msi
        # extension.
        "out": attr.string(mandatory = True),

        # Label of the Bazel binary to package up.
        "release_binary": attr.label(allow_single_file = True, mandatory = True),

        # Version string of the Bazel binary, e.g "0.19.0"
        "release_version": attr.string(mandatory = True),

        # Label of a .rtf file, defining the License for the package. This
        # file's contents are displayed during the installer and the user must
        # accept them to install Bazel.
        "license": attr.label(allow_single_file = True, mandatory = True),

        # Label of an .ico file that'll be Bazel's icon in the
        # "System Settings" > "Add or remove programs" dialog box.
        "icon": attr.label(allow_single_file = True),

        # Label of .bmp file 493px * 312px, the background picture of the first
        # and last installer dialog.
        "artwork_big": attr.label(allow_single_file = True),

        # Label of a .bmp file 493px * 58px, the top picture in the dialog box
        # of the installer where the user selects installation location.
        "artwork_small": attr.label(allow_single_file = True),

        # Label of "light.exe" from the WiX Toolset.
        "_tool_light": attr.label(allow_single_file = True, executable = True,
                                  cfg = "host",
                                  default = "@wix_toolset//:light.exe"),

        # Label of "candle.exe" from the WiX Toolset.
        "_tool_candle": attr.label(allow_single_file = True, executable = True,
                                   cfg = "host",
                                   default = "@wix_toolset//:candle.exe"),
    },
    outputs = {"msi": "%{out}"},
)
